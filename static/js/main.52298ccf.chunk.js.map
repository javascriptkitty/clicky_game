{"version":3,"sources":["components/Header/Header.js","components/Card/Card.js","components/Main/Main.js","components/Hero/Hero.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","message","score","topScore","Card","onClick","id","src","link","Main","state","pictures","handleOnClick","cardId","_this","sort","Math","random","onClickCard","setState","_this2","this","map","picture","components_Card_Card","Component","Hero","App","shake","clicked","handleClick","includes","concat","push","console","log","components_Header_Header","Hero_Hero","components_Main_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"isBAeeA,eAZA,SAAAC,GACb,OACEC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,eACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMK,SAChCJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,UACUJ,EAAMM,MADhB,gBACoCN,EAAMO,4BCIjCC,SAVF,SAAAR,GAGX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOK,QAHF,kBAAMT,EAAMS,QAAQT,EAAMU,MAI5CT,EAAAC,EAAAC,cAAA,OAAKQ,IAAKX,EAAMY,UC6BPC,6MA9BbC,MAAQ,CACNC,cAGFC,cAAgB,SAAAC,GAGd,IAAIF,EAAWG,EAAKJ,MAAMC,SAASI,KAAK,WACtC,MAAO,GAAMC,KAAKC,WAGpBH,EAAKlB,MAAMsB,YAAYL,GACvBC,EAAKK,SAAS,CAAER,sFAGT,IAAAS,EAAAC,KACP,OACExB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACZqB,KAAKX,MAAMC,SAASW,IAAI,SAAAC,GAAO,OAC9B1B,EAAAC,EAAAC,cAACyB,EAAD,CACElB,GAAIiB,EAAQjB,GACZE,KAAMe,EAAQf,KACdH,QAASe,EAAKR,0BAvBPa,mBCMJC,MATf,WACE,OACE7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,yBADF,6ECgDW4B,6MA9CbjB,MAAQ,CACNR,MAAO,EACPC,SAAU,EACVF,QAAS,2BACT2B,OAAO,EACPC,QAAS,MAGXC,YAAc,SAAAxB,GACRQ,EAAKJ,MAAMmB,QAAQE,SAASzB,GAC9BQ,EAAKK,SAAS,CACZjB,MAAO,EACPC,SACEW,EAAKJ,MAAMP,SAAWW,EAAKJ,MAAMR,MAC7BY,EAAKJ,MAAMP,SACXW,EAAKJ,MAAMR,MACjBD,QAAS,2BACT2B,OAAO,EACPC,QAAS,KAGXf,EAAKK,SAAS,CACZjB,MAAOY,EAAKJ,MAAMR,MAAQ,EAC1BC,SAAUW,EAAKJ,MAAMP,SACrBF,QAAS,yBACT2B,OAAO,EACPC,QAASf,EAAKJ,MAAMmB,QAAQG,OAAO1B,KAGvCQ,EAAKJ,MAAMmB,QAAQI,KAAK3B,GACxB4B,QAAQC,IAAIrB,EAAKJ,MAAMmB,kFAGvB,OACEhC,EAAAC,EAAAC,cAAA,OAAKC,UAAWqB,KAAKX,MAAMkB,MAAM,YAAa,OAC5C/B,EAAAC,EAAAC,cAACqC,EAAD,CACEnC,QAASoB,KAAKX,MAAMT,QACpBC,MAAOmB,KAAKX,MAAMR,MAClBC,SAAUkB,KAAKX,MAAMP,WAEvBN,EAAAC,EAAAC,cAACsC,EAAD,MACAxC,EAAAC,EAAAC,cAACuC,EAAD,CAAMpB,YAAaG,KAAKS,sBA1CdL,aCMEc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.52298ccf.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nconst Header = props => {\n  return (\n    <header className=\"header\">\n      <div className=\"logo\">Clicky game</div>\n      <div className=\"message\">{props.message}</div>\n      <div className=\"scores\">\n        Score: {props.score}| Top score: {props.topScore}\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport \"./style.css\";\n\nconst Card = props => {\n  const handleOnClick = () => props.onClick(props.id);\n\n  return (\n    <div className=\"card\" onClick={handleOnClick}>\n      <img src={props.link} />\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { Component } from \"react\";\nimport \"./style.css\";\nimport pictures from \"./pics.json\";\n\nimport Card from \"../Card/Card\";\n\nclass Main extends Component {\n  state = {\n    pictures\n  };\n\n  handleOnClick = cardId => {\n    debugger;\n\n    let pictures = this.state.pictures.sort(function() {\n      return 0.5 - Math.random();\n    });\n\n    this.props.onClickCard(cardId);\n    this.setState({ pictures });\n  };\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        {this.state.pictures.map(picture => (\n          <Card\n            id={picture.id}\n            link={picture.link}\n            onClick={this.handleOnClick}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Hero() {\n  return (\n    <div className=\"hero\">\n      <h1>Clicky game</h1>\n      Click on an image to earn points, but don't click on any more than once!\n    </div>\n  );\n}\n\nexport default Hero;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header/Header\";\nimport Main from \"./components/Main/Main\";\nimport Hero from \"./components/Hero/Hero\";\n\nclass App extends Component {\n  state = {\n    score: 0,\n    topScore: 0,\n    message: \"Click an image to begin!\",\n    shake: false,\n    clicked: []\n  };\n\n  handleClick = id => {\n    if (this.state.clicked.includes(id)) {\n      this.setState({\n        score: 0,\n        topScore:\n          this.state.topScore > this.state.score\n            ? this.state.topScore\n            : this.state.score,\n        message: \"You guessed incorrectly!\",\n        shake: true,\n        clicked: []\n      });\n    } else {\n      this.setState({\n        score: this.state.score + 1,\n        topScore: this.state.topScore,\n        message: \"You guessed correctly!\",\n        shake: false,\n        clicked: this.state.clicked.concat(id)\n      });\n    }\n    this.state.clicked.push(id);\n    console.log(this.state.clicked);\n  };\n  render() {\n    return (\n      <div className={this.state.shake?\"App shake\": \"App\"}>\n        <Header\n          message={this.state.message}\n          score={this.state.score}\n          topScore={this.state.topScore}\n        />\n        <Hero />\n        <Main onClickCard={this.handleClick}  />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}